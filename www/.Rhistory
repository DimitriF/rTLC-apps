30.4  54.4   20000  R  1
29.2  54.4   20000  R  1
28.5  54.3   20000  R  1
28.3  54.4   20000  R  1
24.0  55.1   60000  A  2
24.5  55.2   60000  A  2
25.5  54.7   60000  A  2
26.6  55.7   40000  A  2
27.4  55.6   33000  A  2
28.7  55.5   30000  R  2
29.2  54.3   30000  R  2
28.5  54.2   30000  R  2
28.3  54.3   28000  R  2
27.5  54.5   20000  R  2
26.8  54.3   12000  R  2
26.4  54.4   14000  R  2
24.6  54.5    8000  R  2
24.4  54.4    4000  R  2
24.2  54.4    4000  R  2
24.1  54.3    4000  R  2
24.0  55.2   22000  A  3
24.5  55.3   22000  A  3
24.6  55.8    6000  R  3
24.2  54.4    6000  R  3
24.1  54.3    6000  R  3
~
exit
basic
input,
install.packages("Minard")
install.packages("HistData")
data(Minard.troops); data(Minard.cities)
## Not run:
require(ggplot2)
plot_troops <- ggplot(Minard.troops, aes(long, lat)) +
geom_path(aes(size = survivors, colour = direction, group = group))
plot_both <- plot_troops +
geom_text(aes(label = city), size = 4, data = Minard.cities)
plot_polished <- plot_both +
scale_size(to = c(1, 12),
breaks = c(1, 2, 3) * 10^5, labels = comma(c(1, 2, 3) * 10^5)) +
scale_colour_manual(values = c("grey50","red")) +
xlab(NULL) +
ylab(NULL)
# re-scale the plot window to an aspect ratio of ~ 4 x 1
windows(width=12, height=3)
plot_polished
## TODO: add the plot of temperature below
## End(Not run)
library(HistData)
data(Minard.troops); data(Minard.cities)
## Not run:
require(ggplot2)
plot_troops <- ggplot(Minard.troops, aes(long, lat)) +
geom_path(aes(size = survivors, colour = direction, group = group))
plot_both <- plot_troops +
geom_text(aes(label = city), size = 4, data = Minard.cities)
plot_polished <- plot_both +
scale_size(to = c(1, 12),
breaks = c(1, 2, 3) * 10^5, labels = comma(c(1, 2, 3) * 10^5)) +
scale_colour_manual(values = c("grey50","red")) +
xlab(NULL) +
ylab(NULL)
# re-scale the plot window to an aspect ratio of ~ 4 x 1
windows(width=12, height=3)
plot_polished
## TODO: add the plot of temperature below
## End(Not run)
plot_troops <- ggplot(Minard.troops, aes(long, lat)) +
geom_path(aes(size = survivors, colour = direction, group = group))
plot_both <- plot_troops +
geom_text(aes(label = city), size = 4, data = Minard.cities)
plot_troops
plot_both
plot_polished <- plot_both +
scale_size(to = c(1, 12),
breaks = c(1, 2, 3) * 10^5, labels = comma(c(1, 2, 3) * 10^5)) +
scale_colour_manual(values = c("grey50","red")) +
xlab(NULL) +
ylab(NULL)
data(CushnyPeebles)
# quick looks at the data
plot(CushnyPeebles)
boxplot(CushnyPeebles, ylab="Hours of Sleep", xlab="Treatment")
line<-c(1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3)
index<-c(0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9)
map<-c("  _ ","| | ","|_| ","  ","| ","| ","  _ "," _| ","|_  ",
" _","_| ","_| ","    ","|_| ","  | ","  _ ","|_  "," _| ",
"  _ ","|_  ","|_| "," _  "," |  "," |  ","  _ ","|_| ","|_| ",
"  _ ","|_| "," _| ")
Lines<-cbind(line,index,map)
DF_Lines<-data.frame(Lines,stringsAsFactors=F)
line1<-""
line2<-""
line3<-""
p_number<-readline("Enter a number?: ")
for(i in 1:nchar(p_number)){
num_map<-DF_Lines[DF_Lines$index == as.numeric(l_number[[1]][i]),]
line1<-paste(line1,num_map$map[1])
line2<-paste(line2,num_map$map[2])
line3<-paste(line3,num_map$map[3])
}
lines = paste(line1,"n",line2,"n",line3,"n")
cat(lines)
2^0.5
48.28-14.14
library(ggplot2)
library(scales)
library(gridExtra)
SumNeighbors = function (m) #Summarizes number of alive neighbors for each cell
{
rbind(m[-1,],0)+rbind(0,m[-nrow(m),])+cbind(m[,-1],0)+cbind(0,m[,-ncol(m)])+
cbind(rbind(m[-1,],0)[,-1],0)+cbind(0, rbind(0,m[-nrow(m),])[,-nrow(m)])+
cbind(0,rbind(m[-1,],0)[,-nrow(m)])+cbind(rbind(0,m[-nrow(m),])[,-1],0)
}
NextNeighborhood = function (m) #Calculates next state for each cell according to Conway's rules
{
(1-(SumNeighbors(m)<2 | SumNeighbors(m)>3)*1)-(SumNeighbors(m)==2 & m==0)*1
}
splits=80 #Number of different populations to simulate. Each population s initialized randomly
#according a binomial with probability i/splits with i from 0 to splits
iter=150
results=data.frame()
rm(list = ls(pattern = "conway")) #Remove previous solutions (don't worry!)
for (i in 0:splits)
{
z=matrix(rbinom(size=1, n=8^2, prob=i/splits), nrow=8); z0=z
results=rbind(results, c(i/splits, 0, sum(z)/(nrow(z)*ncol(z))))
for(j in 1:iter)
{z=NextNeighborhood(z); results=rbind(results, c(i/splits, j, sum(z)/(nrow(z)*ncol(z))))}
#Save interesting solutions
if (sum(z)/(nrow(z)*ncol(z))>0) assign(paste("Conway",format(i/splits, nsmall = 4), sep=""), z)
}
install.packages("gridExtra")
library(ggplot2)
library(scales)
library(gridExtra)
SumNeighbors = function (m) #Summarizes number of alive neighbors for each cell
{
rbind(m[-1,],0)+rbind(0,m[-nrow(m),])+cbind(m[,-1],0)+cbind(0,m[,-ncol(m)])+
cbind(rbind(m[-1,],0)[,-1],0)+cbind(0, rbind(0,m[-nrow(m),])[,-nrow(m)])+
cbind(0,rbind(m[-1,],0)[,-nrow(m)])+cbind(rbind(0,m[-nrow(m),])[,-1],0)
}
NextNeighborhood = function (m) #Calculates next state for each cell according to Conway's rules
{
(1-(SumNeighbors(m)<2 | SumNeighbors(m)>3)*1)-(SumNeighbors(m)==2 & m==0)*1
}
splits=80 #Number of different populations to simulate. Each population s initialized randomly
#according a binomial with probability i/splits with i from 0 to splits
iter=150
results=data.frame()
rm(list = ls(pattern = "conway")) #Remove previous solutions (don't worry!)
for (i in 0:splits)
{
z=matrix(rbinom(size=1, n=8^2, prob=i/splits), nrow=8); z0=z
results=rbind(results, c(i/splits, 0, sum(z)/(nrow(z)*ncol(z))))
for(j in 1:iter)
{z=NextNeighborhood(z); results=rbind(results, c(i/splits, j, sum(z)/(nrow(z)*ncol(z))))}
#Save interesting solutions
if (sum(z)/(nrow(z)*ncol(z))>0) assign(paste("Conway",format(i/splits, nsmall = 4), sep=""), z)
}
colnames(results)=c("start", "iter", "sparsity")
#Plot reults of simulation
opt1=theme(panel.background = element_rect(fill="gray85"),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(color="white", size=.5, linetype=2),
plot.title = element_text(size = 45, color="black"),
axis.title = element_text(size = 24, color="black"),
axis.text = element_text(size=20, color="black"),
axis.ticks = element_blank(),
axis.line = element_line(colour = "black", size=1))
ggplot(results, aes(iter, sparsity, group = start))+
geom_path(size=.8, alpha = 0.5, colour="black")+
scale_x_continuous("Iteration", expand = c(0, 0), limits=c(0, iter), breaks = seq(0,iter,10))+
scale_y_continuous("Alive Cells", labels = percent, expand = c(0, 0), limits=c(0, 1), breaks = seq(0, 1,.1))+
labs(title = "Conway's Game Of Life Simulation")+opt1
#List of all interesting solutions
ls(pattern= "Conway", all.names = TRUE)
#Example to plot the evolution of an interesting solution (in this case "Conway0.5500")
require(reshape)
opt=theme(legend.position="none",
panel.background = element_blank(),
panel.grid = element_blank(),
axis.ticks=element_blank(),
axis.title=element_blank(),
axis.text =element_blank())
p1=ggplot(melt(Conway0.5500), aes(x=X1, y=X2))+geom_tile(aes(fill=value), colour="white", lwd=2)+
scale_fill_gradientn(colours = c("gray85", "black"))+opt
p2=ggplot(melt(NextNeighborhood(Conway0.5500)), aes(x=X1, y=X2))+geom_tile(aes(fill=value), colour="white", lwd=2)+
scale_fill_gradientn(colours = c("gray85", "black"))+opt
p3=ggplot(melt(NextNeighborhood(NextNeighborhood(Conway0.5500))), aes(x=X1, y=X2))+geom_tile(aes(fill=value), colour="white", lwd=2)+
scale_fill_gradientn(colours = c("gray85", "black"))+opt
p4=ggplot(melt(NextNeighborhood(NextNeighborhood(NextNeighborhood(Conway0.5500)))), aes(x=X1, y=X2))+geom_tile(aes(fill=value), colour="white", lwd=2)+
scale_fill_gradientn(colours = c("gray85", "black"))+opt
#Arrange four plots in a 2x2 grid
grid.arrange(p1, p2, p3, p4, ncol=2)
p1=ggplot(melt(Conway0.1375), aes(x=X1, y=X2))+geom_tile(aes(fill=value), colour="white", lwd=2)+
scale_fill_gradientn(colours = c("gray85", "black"))+opt
p2=ggplot(melt(NextNeighborhood(Conway0.1375)), aes(x=X1, y=X2))+geom_tile(aes(fill=value), colour="white", lwd=2)+
scale_fill_gradientn(colours = c("gray85", "black"))+opt
p3=ggplot(melt(NextNeighborhood(NextNeighborhood(Conway0.1375))), aes(x=X1, y=X2))+geom_tile(aes(fill=value), colour="white", lwd=2)+
scale_fill_gradientn(colours = c("gray85", "black"))+opt
p4=ggplot(melt(NextNeighborhood(NextNeighborhood(NextNeighborhood(Conway0.1375)))), aes(x=X1, y=X2))+geom_tile(aes(fill=value), colour="white", lwd=2)+
scale_fill_gradientn(colours = c("gray85", "black"))+opt
#Arrange four plots in a 2x2 grid
grid.arrange(p1, p2, p3, p4, ncol=2)
p1=ggplot(melt(Conway0.6750), aes(x=X1, y=X2))+geom_tile(aes(fill=value), colour="white", lwd=2)+
scale_fill_gradientn(colours = c("gray85", "black"))+opt
p2=ggplot(melt(NextNeighborhood(Conway0.6750)), aes(x=X1, y=X2))+geom_tile(aes(fill=value), colour="white", lwd=2)+
scale_fill_gradientn(colours = c("gray85", "black"))+opt
p3=ggplot(melt(NextNeighborhood(NextNeighborhood(Conway0.6750))), aes(x=X1, y=X2))+geom_tile(aes(fill=value), colour="white", lwd=2)+
scale_fill_gradientn(colours = c("gray85", "black"))+opt
p4=ggplot(melt(NextNeighborhood(NextNeighborhood(NextNeighborhood(Conway0.6750)))), aes(x=X1, y=X2))+geom_tile(aes(fill=value), colour="white", lwd=2)+
scale_fill_gradientn(colours = c("gray85", "black"))+opt
#Arrange four plots in a 2x2 grid
grid.arrange(p1, p2, p3, p4, ncol=2)
35*0.05
20^2
400-16^2
144^0.5
16^2-13^2
87^0.5
16^2-15^2
16^2-2.5^2
250^0.5
3^2
9+10^2
109^0.5
12*1.43
17.16^2+2.57^2
301.0705^0.5
2^0.5
2^0.5 * 2^0.5
3^0.5
3^0.5*20
getwd()
dir()
system("python Python/str_format.py")
system("python Python/hello.py")
system("python Python/hello.py")
system("python Python/str_format.py")
truc <- system("python Python/hello.py")
truc <- system("python Python/hello.py")
truc
system("python Python/20140916-brouillon.py")
system("python Python/20140916-brouillon.py")
system("python Python/20140916-brouillon.py")
10/25
library(kohonen)
library(jpeg)
## CrÃ©er une table avec n pieds,
## h niveau de hauteur, x niveau de largeur et y niveau de longueur
n <- 4
h <- 10
x <- 10
y <- 10
## Creation  vecteur de points
vec1 <- sample(seq(1/h,1,1/h),x*y,replace=T)
## on divise les niveau pour leur donner moins d'importance lors du machine learning
vec2 <- sample(seq(n),x*y,replace=T)
## creation du model
model <- som(
data=as.matrix(cbind(vec1,vec2)),
grid=somgrid(x,y,"hexagonal")
)
plot(model)
model <- som(
data=as.matrix(cbind(vec1,vec2)),
grid=somgrid(x,y,"rectangular")
)
plot(model)
model$codes
model$codes$vec1
model$codes[,vec1]
matrix(model$codes[,vec1],nrow=x,ncol=y,byrow=T)
getwd()
writeJPEG(matrix(model$codes[,vec1],nrow=x,ncol=y,byrow=T),"test-kohonen")
writeJPEG(matrix(model$codes[,vec1],nrow=x,ncol=y,byrow=T),"test-kohonen.jpeg")
plot(model)
plot(model,"counts")
library(kohonen)
library(jpeg)
## CrÃ©er une table avec n pieds,
## h niveau de hauteur, x niveau de largeur et y niveau de longueur
n <- 4
h <- 10
x <- 10
y <- 10
## Creation  vecteur de points
vec1 <- sample(seq(1/h,1,1/h),x*y,replace=T,prob=(0.55,rep(0.05,9)))
## on divise les niveau pour leur donner moins d'importance lors du machine learning
vec2 <- sample(seq(n),x*y,replace=T)
## creation du model
model <- som(
data=as.matrix(cbind(vec1,vec2)),
grid=somgrid(x,y,"rectangular")
)
## visualisation
plot(model)
## jpeg reconstruction
model$codes[,vec1]
writeJPEG(matrix(model$codes[,vec1],nrow=x,ncol=y,byrow=T),"test-kohonen.jpeg")
(0.55,rep(0.05,9))
library(kohonen)
library(jpeg)
## CrÃ©er une table avec n pieds,
## h niveau de hauteur, x niveau de largeur et y niveau de longueur
n <- 4
h <- 10
x <- 10
y <- 10
## Creation  vecteur de points
vec1 <- sample(seq(1/h,1,1/h),x*y,replace=T,prob=c(0.55,rep(0.05,9)))
## on divise les niveau pour leur donner moins d'importance lors du machine learning
vec2 <- sample(seq(n),x*y,replace=T)
## creation du model
model <- som(
data=as.matrix(cbind(vec1,vec2)),
grid=somgrid(x,y,"rectangular")
)
## visualisation
plot(model)
## jpeg reconstruction
model$codes[,vec1]
writeJPEG(matrix(model$codes[,vec1],nrow=x,ncol=y,byrow=T),"test-kohonen.jpeg")
library(kohonen)
library(jpeg)
## CrÃ©er une table avec n pieds,
## h niveau de hauteur, x niveau de largeur et y niveau de longueur
n <- 6
h <- 100
x <- 100
y <- 100
## Creation  vecteur de points
vec1 <- sample(seq(1/h,1,1/h),x*y,replace=T)
## on divise les niveau pour leur donner moins d'importance lors du machine learning
vec2 <- sample(seq(n),x*y,replace=T)
## creation du model
model <- som(
data=as.matrix(cbind(vec1,vec2)),
grid=somgrid(x,y,"rectangular")
)
library(kohonen)
library(jpeg)
## CrÃ©er une table avec n pieds,
## h niveau de hauteur, x niveau de largeur et y niveau de longueur
n <- 6
h <- 100
x <- 100
y <- 100
## Creation  vecteur de points
vec1 <- sample(seq(1/h,1,1/h),x*y,replace=T)
## on divise les niveau pour leur donner moins d'importance lors du machine learning
vec2 <- sample(seq(n),x*y,replace=T)
## creation du model
model <- som(
data=as.matrix(cbind(vec1,vec2)),
grid=somgrid(x,y,"rectangular")
)
## visualisation
plot(model)
## jpeg reconstruction
model$codes[,vec1]
writeJPEG(matrix(model$codes[,vec1],nrow=x,ncol=y,byrow=T),"test-kohonen.jpeg")
0.86603*0.86603+0.5*0.5
836*5/5.8
28+6+8
13.5/13
14/13.653
80/122
4000/122
4000/1.22
shiny::runApp("~/Dropbox/rTMX",launch.browser=TRUE)
shiny::runApp("~/Dropbox/rTMX",launch.browser=TRUE)
shiny::runApp("~/Dropbox/rTMX/apps",launch.browser=TRUE)
shiny::runApp("~/Dropbox/Shiny.HPTLC",launch.browser=TRUE)
shiny::runApp("~/Dropbox/rTMX/apps",launch.browser=TRUE)
shiny::runApp("~/Dropbox/rTMX/apps",launch.browser=TRUE)
shiny::runApp("~/Dropbox/rTMX/apps",launch.browser=TRUE)
shiny::runApp("C:/Users/Dimitri/Dropbox/image3D/R",launch.browser=TRUE)
shiny::runApp("~/Dropbox/image3D/R",launch.browser=TRUE)
shiny::runApp("~/Dropbox/EPTLC",launch.browser=TRUE)
shinyapps::deployApp("C:/Users/Dimitri/Dropbox/EPTLC",account="dimitrif",appName="EPTLC")
shinyapps::deployApp("~/Dropbox/EPTLC",account="dimitrif",appName="EPTLC")
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/shinyapps")
shinyapps::deployApp("~/Dropbox/EPTLC",account="dimitrif",appName="EPTLC")
shinyapps::setAccountInfo(name='dimitrif', token='FB2136BCC4D26B71267F06AA2C8569B1', secret='huvWkoytqDtWVQGcf4l5RmcvS72mgEMwDxQTJX+g')
shinyapps::deployApp("~/Dropbox/EPTLC",account="dimitrif",appName="EPTLC")
shinyapps::deployApp("~/Dropbox/EPTLC",account="dimitrif",appName="EPTLC")
shinyapps::deployApp("~/Dropbox/EPTLC",account="dimitrif",appName="EPTLC")
shinyapps::deployApp("~/Dropbox/EPTLC",account="dimitrif",appName="rHPTLC")
shinyapps::deployApp("~/Dropbox/EPTLC",account="dimitrif",appName="rHPTLC")
shinyapps::deployApp("~/Dropbox/EPTLC",account="dimitrif",appName="rHPTLC")
shinyapps::deployApp("~/Dropbox/EPTLC",account="dimitrif",appName="EPTLC")
library("shinyapps", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
applications()
applications("dimitrif")
shinyapps::deployApp("~/Dropbox/EPTLC",account="dimitrif",appName="EPTLC")
shinyapps::deployApp("~/Dropbox/EPTLC",account="dimitrif",appName="EPTLC",lint=T,upload=T)
shinyapps::setAccountInfo(name='dimitrif',token='12BDBB72FBC7A916E91AF77BDE68D261', secret='JN8OiyruruB37yO3wSpWSok0cdZ/HKHjtUt3dPCU')
shinyapps::deployApp("~/Dropbox/EPTLC",account="dimitrif",appName="EPTLC")
shinyapps::deployApp("~/Dropbox/EPTLC",account="dimitrif",appName="EPTLC")
shiny::runApp("~Dimitri/Dropbox/EPTLC",launch.browser=TRUE)
shiny::runApp("~Dimitri/Dropbox/EPTLC",launch.browser=TRUE)
shiny::runApp("~Dimitri/Dropbox/EPTLC",launch.browser=TRUE)
shinyapps::deployApp("~/Dropbox/EPTLC",account="dimitrif",appName="EPTLC")
shinyapps::deployApp("~/Dropbox/EPTLC",account="dimitrif",appName="EPTLC")
shinyapps::setAccountInfo(name='dimitrif', token='5B1C4D1CC7F773933341B05660D620EC', secret='m+M+wLLIbGvLsXYjp53Fy+R+Y7Wp+RawdsFEPv+W')
shinyapps::deployApp("~/Dropbox/EPTLC",account="dimitrif",appName="EPTLC")
shinyapps::deployApp("~/Dropbox/EPTLC",account="dimitrif",appName="EPTLC")
shinyapps::deployApp("~/Dropbox/EPTLC",account="dimitrif",appName="EPTLC")
shiny::runApp("~Dimitri/Dropbox/EPTLC",launch.browser=TRUE)
shinyapps::deployApp("~/Dropbox/EPTLC",account="dimitrif",appName="EPTLC")
shinyapps::setAccountInfo(name='dimitrif', token='5B1C4D1CC7F773933341B05660D620EC', secret='m+M+wLLIbGvLsXYjp53Fy+R+Y7Wp+RawdsFEPv+W')
shinyapps::deployApp("~/Dropbox/EPTLC",account="dimitrif",appName="EPTLC")
shinyapps::deployApp("~/Dropbox/EPTLC",account="dimitrif",appName="EPTLC")
shinyapps::setAccountInfo(name='dimitrif', token='5B1C4D1CC7F773933341B05660D620EC', secret='m+M+wLLIbGvLsXYjp53Fy+R+Y7Wp+RawdsFEPv+W')
shinyapps::deployApp("~/Dropbox/EPTLC",account="dimitrif",appName="EPTLC")
shinyapps::deployApp("~/Dropbox/EPTLC",account="dimitrif",appName="EPTLC")
shinyapps::setAccountInfo(name='dimitrif', token='1D62C18709BE96F1D5E6A48E037E7200', secret='ZnNpJrL1jfm1EUNx/341XsONbJ348OOjoweTt2Ji')
shinyapps::deployApp("~/Dropbox/EPTLC",account="dimitrif",appName="EPTLC")
shinyapps::deployApp("~/Dropbox/EPTLC",account="dimitrif",appName="EPTLC")
shinyapps::setAccountInfo(name='dimitrif', token='5B1C4D1CC7F773933341B05660D620EC', secret='m+M+wLLIbGvLsXYjp53Fy+R+Y7Wp+RawdsFEPv+W')
shinyapps::setAccountInfo(name='dimitrif', token='4E44EAEFBC54AB9917C143189F1B1A52', secret='QST/zp98jbN2KeC32R0pFEQUx7z93QeLCgfvh/vI')
shinyapps::deployApp("~/Dropbox/EPTLC",account="dimitrif",appName="EPTLC")
shiny::runApp("~/Dropbox/rTMX/apps",launch.browser=TRUE)
shinyapps::deployApp("~/Dropbox/rTMX/apps",account="dimitrif",appName="rTMX")
install.packages("RcppEigen")
shinyapps::deployApp("~/Dropbox/rTMX/apps",account="dimitrif",appName="rTMX")
shiny::runApp("~/Dropbox/rTMX/apps",launch.browser=TRUE)
shiny::runApp("~Dimitri/Dropbox/EPTLC",launch.browser=TRUE)
?hr
shiny::runApp("~Dimitri/Dropbox/EPTLC",launch.browser=TRUE)
shinyapps::deployApp("~/Dropbox/EPTLC",account="dimitrif",appName="EPTLC")
450+406+118+16+32+215
900+216+9+320
900+216+9+216+25
900+216+9+216+25+1445+1237
40.48/2.6
40.48/2.6*23.62
shiny::runApp("~Dimitri/Dropbox/EPTLC",launch.browser=TRUE)
??standardNormalVariate
help("standardNormalVariate")
shiny::runApp("~Dimitri/Dropbox/EPTLC",launch.browser=TRUE)
shinyapps::deployApp("~/Dropbox/EPTLC",account="dimitrif",appName="EPTLC")
shiny::runApp("~/Dropbox/rTMX/apps",launch.browser=TRUE)
Sys.time
Sys.time()
shiny::runApp("~Dimitri/Dropbox/EPTLC",launch.browser=TRUE)
Sys.time()
shiny::runApp("~Dimitri/Dropbox/EPTLC",launch.browser=TRUE)
send.mail(from = "dimitrifi@laposte.net",
to = "dimitrifi@laposte.net",
subject = "subject",
body = "Body of the email",
smtp = list(host.name = "smtp.laposte.net", port = 25, user.name = "dimitrifi", passwd = "Tigrou", ssl = TRUE, tls = TRUE),
authenticate = TRUE,
send = TRUE,
attach.files=NULL)
shiny::runApp("~Dimitri/Dropbox/EPTLC",launch.browser=TRUE)
shinyapps::deployApp("~/Dropbox/EPTLC",account="dimitrif",appName="EPTLC")
shiny::runApp("~Dimitri/Dropbox/EPTLC",launch.browser=TRUE)
shiny::runApp("~Dimitri/Dropbox/EPTLC",launch.browser=TRUE)
shiny::runApp("~Dimitri/Dropbox/EPTLC",launch.browser=TRUE)
shiny::runApp("~Dimitri/Dropbox/EPTLC",launch.browser=TRUE)
shiny::runApp("~Dimitri/Dropbox/EPTLC",launch.browser=TRUE)
shinyapps::deployApp("~/Dropbox/EPTLC",account="dimitrif",appName="EPTLC")
redim = function(im, w.out, h.out) {
w.in = nrow(im)
h.in = ncol(im)
im.out = matrix(rep(0,w.out*h.out), nrow =w.out, ncol=h.out )
w_ratio = w.in/w.out
h_ratio = h.in/h.out
im.out <- im[ floor(w_ratio* 1:w.out), floor(h_ratio* 1:h.out)]
return(im.out)
}
truc <- matrix(rep(1,10000),nrow=100,ncol=100)
redim(rtuc,1000,1000)
redim(truc,1000,1000)
machin <- redim(truc, 1000,1000)
dim(machin)
dim(truc)
f.read.image<-function(source,native,format){
if(format == "tiff"){data<-readTIFF(source=source,native=native)}
if(format == "jpeg"){data<-readJPEG(source=source,native=native)}
if(format == "png"){data<-readPNG(source=source,native=native)}
#   data[,,1] <- redim(data[,,1],)
return(data)
}
setwd("~/Dropbox/EPTLC/www")
dir()
data <- f.read.image(dir()[9],F,"jpeg")
dim(data)
shiny::runApp("~Dimitri/Dropbox/EPTLC",launch.browser=TRUE)
data <- f.read.image(dir()[9],T,"jpeg")
f.read.image<-function(source,native,format){
if(format == "tiff"){data<-readTIFF(source=source,native=native)}
if(format == "jpeg"){data<-readJPEG(source=source,native=native)}
if(format == "png"){data<-readPNG(source=source,native=native)}
#   data[,,1] <- redim(data[,,1],512,dim(data)[2])
#   data[,,2] <- redim(data[,,2],512,dim(data)[2])
#   data[,,3] <- redim(data[,,3],512,dim(data)[2])
return(data)
}
data <- f.read.image(dir()[9],T,"jpeg")
dim(data)
shiny::runApp("~Dimitri/Dropbox/EPTLC",launch.browser=TRUE)
getwd()
shiny::runApp("~Dimitri/Dropbox/EPTLC",launch.browser=TRUE)
