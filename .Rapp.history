View(x)
edit(x)
edit(f)
lapply(split(x,f)mean)
lapply(split(x,f),mean)
str(tapply)#
function (X, INDEX, FUN = NULL, ..., simplify = TRUE)#
#
###
x <- c(rnorm(10), runif(10), rnorm(10, 1))#
f <- gl(3, 10)#
tapply(x, f, mean)#
#
tapply(x, f, mean, simplify = FALSE)#
#
tapply(x, f, range)#
#
###
str(split)#
function (x, f, drop = FALSE, ...)#
#
###
x <- c(rnorm(10), runif(10), rnorm(10, 1))#
f <- gl(3, 10)#
split(x, f)#
#
###
lapply(split(x, f), mean)#
#
###
library(datasets)#
head(airquality)#
#
s <- split(airquality, airquality$Month)#
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))#
#
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))#
#
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))#
#
x <- rnorm(10)#
f1 <- gl(2, 5)#
f2 <- gl(5, 2)#
#
interaction(f1, f2)#
#
str(split(x, list(f1, f2)))#
#
str(split(x, list(f1, f2), drop = TRUE))
str(mapply)
mapply(rep,1:4, 4:1)
mapply(rep,1:4, 4:1, simplfy=F)
mapply(rep,1:4, 4:1, simplify=F)
mapply(rep,1:4, 4:1, simplify=T)
mapply(rep,1:4, 4:4, simplify=T)
mapply(rep,1:4, 4:4, simplify=F)
noise<-function(n,mean,sd){#
		rnorm(n,mean,sd)#
}
noise(5,1,2)
rnorm(5,1,2)
noise(1:5,1:5,2)
mapply(noise,1:5,1:5,2)
mapply(rep,1:4, 5:1, simplify=T)
mapply(rep,1:4, 8:1, simplify=T)
debug(lm)
lm(k)
23
n
lm(x)
n
bug(lm)
debug(lm)
lm
lm(n)
nnnn
n
17*17+54+29*17
17.46*17.46*1.0692+17.46*29.6992.54.8061
17.46*17.46*1.0692+17.46*29.6992+54.8061
library(kohonen)
shiny::runApp("~/R/kohonen.IR.V.0.1")
license()
getwd()
library(randomForest)
install.packages("randomForest")
?randomForest
library(randomForest)
?randomForest
2^31
sample(c(T,F),30,prob=c(0.6,1-0.6))
sample(c(T,F),30,prob=c(0.6,1-0.6),replace=T)
Iris <- data.frame(rbind(iris3[,,1], iris3[,,2], iris3[,,3]),#
                   Sp = rep(c("s","c","v"), rep(50,3)))#
train <- sample(1:150, 75)#
table(Iris$Sp[train])#
## your answer may differ#
##  c  s  v#
## 22 23 30#
z <- lda(Sp ~ ., Iris, prior = c(1,1,1)/3, subset = train)#
predict(z, Iris[-train, ])$class#
##  [1] s s s s s s s s s s s s s s s s s s s s s s s s s s s c c c#
## [31] c c c c c c c v c c c c v c c c c c c c c c c c c v v v v v#
## [61] v v v v v v v v v v v v v v v#
(z1 <- update(z, . ~ . - Petal.W.))
library(MASS)
Iris <- data.frame(rbind(iris3[,,1], iris3[,,2], iris3[,,3]),#
                   Sp = rep(c("s","c","v"), rep(50,3)))#
train <- sample(1:150, 75)#
table(Iris$Sp[train])#
## your answer may differ#
##  c  s  v#
## 22 23 30#
z <- lda(Sp ~ ., Iris, prior = c(1,1,1)/3, subset = train)#
predict(z, Iris[-train, ])$class#
##  [1] s s s s s s s s s s s s s s s s s s s s s s s s s s s c c c#
## [31] c c c c c c c v c c c c v c c c c c c c c c c c c v v v v v#
## [61] v v v v v v v v v v v v v v v#
(z1 <- update(z, . ~ . - Petal.W.))
summary(z)
shinyapps::deployApp("~/Dropbox/rTMX/apps",account="dimitrif",appName="rTMX")
shiny::runApp("~/Dropbox/rTMX/apps",launch.browser=TRUE)
shiny::runApp("~/Dropbox/rTMX/rTMX for gert",launch.browser=TRUE)
library(shiny)#
runApp( list(ui = bootstrapPage(#
  verbatimTextOutput("results"),#
  tags$script('#
    $(document).on("keypress", function (e) {#
       Shiny.onInputChange("mydata", e.which);#
    });#
  ') #
)#
, server = function(input, output, session) {#
#
  output$results = renderPrint({#
    input$mydata#
  })#
}#
))
library(shiny)#
runApp( list(ui = bootstrapPage(#
  verbatimTextOutput("results"),#
  tags$script('#
    $(document).on("keypress", function (e) {#
       Shiny.onInputChange("mydata", e.which);#
    });#
  ') #
)#
, server = function(input, output, session) {#
#
  output$results = renderPrint({#
    is.num(input$mydata)#
  })#
}#
))
library(shiny)#
runApp( list(ui = bootstrapPage(#
  verbatimTextOutput("results"),#
  tags$script('#
    $(document).on("keypress", function (e) {#
       Shiny.onInputChange("mydata", e.which);#
    });#
  ') #
)#
, server = function(input, output, session) {#
#
  output$results = renderPrint({#
    is.numeric(input$mydata)#
  })#
}#
))
library(shyni)
library(shiny)
if (interactive()) {#
  ui <- fluidPage(#
    column(4,#
      numericInput("x", "Value", 5),#
      br(),#
      actionButton("button", "Show")#
    ),#
    column(8, tableOutput("table"))#
  )#
  server <- function(input, output) {#
    # Take an action every time button is pressed;#
    # here, we just print a message to the console#
    observeEvent(input$button, {#
      cat("Showing", input$x, "rows\n")#
    })#
    # Take a reactive dependency on input$button, but#
    # not on any of the stuff inside the function#
    df <- eventReactive(input$button, {#
      head(cars, input$x)#
    })#
    output$table <- renderTable({#
      df()#
    })#
  }#
  shinyApp(ui=ui, server=server)#
}
library(shiny)#
runApp( list(ui = bootstrapPage(#
  verbatimTextOutput("results"),#
  tags$script('#
    $(document).on("keypress", function (e) {#
       Shiny.onInputChange("mydata", e.which);#
    });#
  ') #
)#
, server = function(input, output, session) {#
#
  output$results = renderPrint({#
    is.numeric(input$mydata)#
  })#
}#
))
library(shiny)#
runApp( list(ui = bootstrapPage(#
  verbatimTextOutput("results"),#
  tags$script('#
    $(document).on("keypress", function (e) {#
       Shiny.onInputChange("mydata", e.which);#
    });#
  ') #
)#
, server = function(input, output, session) {#
#
  output$results = renderPrint({#
    input$mydata#
  })#
}#
))
shiny::runApp("~/Dropbox/rTMX/rTMX for gert",launch.browser=TRUE)
matrix(seq'16',4,4)
matrix(seq(16),4,4)
apply(matrix(seq(16),4,4),1,sum)
nrow(matrix(seq(16),4,4))
nrow(matrix(seq(16),1,4))
nrow(as.data.frame(matrix(seq(16),1,4)))
seq(4)-2:5
seq(4)-c(1,1,1,1)
unlist(list(c(1:2),c(4:5)))
9086+7825
shiny::runApp("~/Dropbox/rTMX/flyRtmx",launch.browser=TRUE)
load("~/Downloads/flyRtmx_feedback-2.Rdata")
str(data)
data$label
str(as.character(data$label))
library(dplyr)
inner_join(seq(10),c(4:15))
duplicated(c(seq(10),c(4:15)))
vec1 <- c(1,2,3,4,5,6,7)
vec2 <- c(2,4,5)
vec3 <- c(vec1,vec2)
vec3
duplicated(vec3)
vec3 <- c(vec1,vec2,9)
duplicated(vec3)
library(plotrix)
draw.circle(50,50,50)
plot.new=T
draw.circle(50,50,50)
draw.circle(50,50,50,col=1)
plot(1:5,seq(1,10,length=5),type="n",xlab="",ylab="",main="Test draw.circle")#
 draw.circle(2,4,c(1,0.66,0.33),border="purple",#
  col=c("#ff00ff","#ff77ff","#ffccff"),lty=1,lwd=1)#
 draw.circle(2.5,8,0.6,border="red",lty=3,lwd=3)#
 draw.circle(4,3,0.7,border="green",lty=1,lwd=1)#
 draw.circle(3.5,7,0.8,border="blue",lty=2,lwd=2)
plot(1:10,1:10,type="n",xlab="",ylab="",main="Comparaison llustration")
draw.circle(2,4,2,border=1)
draw.circle(3,4,2,border=1)
draw.circle(4,4,2,border=1)
plot(1:10,1:8,type="n",xlab="",ylab="",main="Comparaison llustration")
draw.circle(4,4,2,border=1)
draw.circle(8,4,2,border=2,lty=3)
plot(1:10,1:8,type="n",xlab="",ylab="",frame.plot=F,
plot(1:10,1:8,type="n",xlab="",ylab="",frame.plot=F,#
main="Comparaison llustration")#
 draw.circle(4,4,2,border=1)#
 draw.circle(8,4,2.5,border=2,lty=3)
load("/Users/dimitri/Downloads/flyRtmx file to compare/fly.table.for.demo.Rdata")
plot(1:10,1:8,type="n",xlab="",ylab="",frame.plot=F,main="Comparaison llustration")#
 draw.circle(4,4,2,border=1)#
 draw.circle(8,4,2.5,border=2,lty=3)
plot(1:10,1:8,type="n",xlab="",ylab="",main="Comparaison llustration")#
 draw.circle(4,4,2,border=1)#
 draw.circle(8,4,2.5,border=2,lty=3)
plot(1:10,1:10,type="n",xlab="",ylab="",frame.plot=F,main="Comparaison llustration")#
 draw.circle(4,4,2,border=1)#
 draw.circle(8,4,2.5,border=2,lty=3)
plot(1:10,1:10,type="n",xlab="",ylab="",xaxis="",frame.plot=F,main="Comparaison llustration")
plot(1:10,1:10,type="n",xlab="",ylab="",xaxis="",frame.plot=F,main="Comparaison llustration")#
 draw.circle(4,4,2,border=1)#
 draw.circle(8,4,2.5,border=2,lty=3)
plot(1:10,1:10,type="n",xlab="",ylab="",xaxis=NULL,frame.plot=F,main="Comparaison llustration")#
 draw.circle(4,4,2,border=1)#
 draw.circle(8,4,2.5,border=2,lty=3)
plot(1:10,1:10,type="n",xlab="",ylab="",axes=F,frame.plot=F,main="Comparaison llustration")#
 draw.circle(4,4,2,border=1)#
 draw.circle(8,4,2.5,border=2,lty=3)
plot(1:10,1:10,type="n",xlab="",ylab="",axes=F,frame.plot=F,main="Comparaison llustration")#
 draw.circle(4,5,2,border=1)#
 draw.circle(8,5,2.5,border=2,lty=3)
plot(1:10,1:10,type="n",xlab="",ylab="",axes=F,frame.plot=F,main="Comparaison llustration")#
 draw.circle(4,5,2,border=1)#
 draw.circle(6,5,2.5,border=2,lty=3)
plot(1:10,1:10,type="n",xlab="",ylab="",axes=F,frame.plot=F,main="Comparaison llustration")#
 draw.circle(4,5.5,2,border=1)#
 draw.circle(6,5.5,2.5,border=2,lty=3)
plot(1:10,1:10,type="n",xlab="",ylab="",axes=F,frame.plot=F,main="Comparaison llustration")#
 draw.circle(4,5.5,2,border=1)#
 draw.circle(6,5.5,2.2,border=2,lty=3)
plot(1:10,1:10,type="n",xlab="",ylab="",axes=F,frame.plot=F,main="Comparaison llustration")#
 draw.circle(4,5.5,2,border=1)#
 draw.circle(6,5.5,2.3,border=2,lty=3)
legend(1,9,fill=0,border=c(1,2))
legend(1,9,fill=0,border=c(1,2),legend=(c('New Method','Manual Method')))
legend(1,11,fill=0,border=c(1,2),legend=(c('New Method','Manual Method')))
legend(1,10,fill=0,border=c(1,2),legend=(c('New Method','Manual Method')))
plot(1:10,1:10,type="n",xlab="",ylab="",axes=F,frame.plot=F,main="Comparaison llustration")#
 draw.circle(4,5.5,2,border=1)#
 draw.circle(6,5.5,2.3,border=2)#
 legend(1,10,fill=0,border=c(1,2),legend=(c('New Method','Manual Method')))
plot(1:10,1:10,type="n",xlab="",ylab="",axes=F,frame.plot=F,main="Comparaison llustration")#
 draw.circle(4,4,2,border=1)#
 draw.circle(6,5.5,2.3,border=2)#
 legend(1,10,fill=0,border=c(1,2),legend=(c('New Method','Manual Method')))
plot(1:10,1:10,type="n",xlab="",ylab="",axes=F,frame.plot=F,main="Comparaison llustration")#
 draw.circle(4,4,1.5,border=1)#
 draw.circle(6,5.5,2,border=2)#
 legend(1,10,fill=0,border=c(1,2),legend=(c('New Method','Manual Method')))
plot(1:10,1:10,type="n",xlab="",ylab="",axes=F,frame.plot=F,main="Comparaison llustration")#
 draw.circle(4,4,1.5,border=1)#
 draw.circle(6,5.5,1.6,border=2)#
 legend(1,10,fill=0,border=c(1,2),legend=(c('New Method','Manual Method')))
plot(1:10,1:10,type="n",xlab="",ylab="",axes=F,frame.plot=F,main="Comparaison llustration")#
 draw.circle(4,4,1.5,border=1)#
 draw.circle(6,4,1.6,border=2)#
 legend(1,10,fill=0,border=c(1,2),legend=(c('New Method','Manual Method')))
plot(1:10,1:10,type="n",xlab="",ylab="",axes=F,frame.plot=F,main="Comparaison llustration")#
 draw.circle(2,4,1.5,border=1)#
 draw.circle(,4,1.6,border=2)#
 legend(1,10,fill=0,border=c(1,2),legend=(c('New Method','Manual Method')))
plot(1:10,1:10,type="n",xlab="",ylab="",axes=F,frame.plot=F,main="Comparaison llustration")#
 draw.circle(2.2,4,1.5,border=1)#
 draw.circle(,4,1.6,border=2)#
 legend(1,10,fill=0,border=c(1,2),legend=(c('New Method','Manual Method')))
plot(1:10,1:10,type="n",xlab="",ylab="",axes=F,frame.plot=F,main="Comparaison llustration")#
 draw.circle(2.2,4,1.5,border=1)#
 draw.circle(2.5,4,1.6,border=2)#
 legend(1,10,fill=0,border=c(1,2),legend=(c('New Method','Manual Method')))
plot(1:10,1:10,type="n",xlab="",ylab="",axes=F,frame.plot=F,main="Comparaison llustration")#
 draw.circle(2.2,4,1.5,border=1)#
 draw.circle(2.5,4,1.6,border=2)#
 draw.circle(5,4,1.5,border=1)#
 draw.circle(6,4,1.6,border=2)#
 legend(1,10,fill=0,border=c(1,2),legend=(c('New Method','Manual Method')))
plot(1:10,1:10,type="n",xlab="",ylab="",axes=F,frame.plot=F,main="Comparaison llustration")#
 draw.circle(2.2,4,1.5,border=1)#
 draw.circle(2.5,4,1.6,border=2)#
 draw.circle(6,4,1.5,border=1)#
 draw.circle(8,4,1.6,border=2)#
 legend(1,10,fill=0,border=c(1,2),legend=(c('New Method','Manual Method')))
plot(1:10,1:10,type="n",xlab="",ylab="",axes=F,frame.plot=F,main="Comparaison llustration",)#
 draw.circle(2.2,4,1.5,border=1)#
 draw.circle(2.5,4,1.6,border=2)#
 draw.circle(6,4,1.5,border=1)#
 draw.circle(8,4,1.6,border=2)#
 legend(1,10,fill=0,border=c(1,2),legend=(c('New Method','Manual Method')))#
 text(1,4,'Commun')
text(1,4,'1')#
 text(1,4,'2')#
 text(1,4,'3')
text(0.5,4,'1')#
 text(2.5,4,'2')#
 text(4,4,'3')
plot(1:10,1:10,type="n",xlab="",ylab="",axes=F,frame.plot=F,main="Comparaison llustration",)#
 draw.circle(2.2,4,1.5,border=1)#
 draw.circle(2.5,4,1.6,border=2)#
 draw.circle(6,4,1.5,border=1)#
 draw.circle(8,4,1.6,border=2)#
 legend(1,10,fill=0,border=c(1,2),legend=(c('New Method','Manual Method')))#
 text(0.5,4,'1')#
 text(2.5,4,'2')#
 text(4,4,'3')
plot(1:10,1:10,type="n",xlab="",ylab="",axes=F,frame.plot=F,main="Comparaison llustration",)#
 draw.circle(2.2,4,1.5,border=1)#
 draw.circle(2.5,4,1.6,border=2)#
 draw.circle(6,4,1.5,border=1)#
 draw.circle(8,4,1.6,border=2)#
 legend(1,10,fill=0,border=c(1,2),legend=(c('New Method','Manual Method')))#
 text(1,4,'1')#
 text(2.5,4,'2')#
 text(4,4,'3')
plot(1:10,1:10,type="n",xlab="",ylab="",axes=F,frame.plot=F,main="Comparaison llustration",)#
 draw.circle(2.2,4,1.5,border=1)#
 draw.circle(2.5,4,1.6,border=2)#
 draw.circle(6,4,1.5,border=1)#
 draw.circle(8,4,1.6,border=2)#
 legend(1,10,fill=0,border=c(1,2),legend=(c('New Method','Manual Method')))#
 text(0.9,4,'1')#
 text(2.5,4,'2')#
 text(4,4,'3')
plot(1:10,1:10,type="n",xlab="",ylab="",axes=F,frame.plot=F,main="Comparaison llustration",)#
 draw.circle(2.2,4,1.5,border=1)#
 draw.circle(2.5,4,1.6,border=2)#
 draw.circle(6,4,1.5,border=1)#
 draw.circle(8,4,1.6,border=2)#
 legend(1,10,fill=0,border=c(1,2),legend=(c('New Method','Manual Method')))#
 text(0.8,4,'1')#
 text(2.5,4,'2')#
 text(4,4,'3')
plot(1:10,1:10,type="n",xlab="",ylab="",axes=F,frame.plot=F,main="Comparaison llustration",)#
 draw.circle(2.2,4,1.5,border=1)#
 draw.circle(2.5,4,1.6,border=2)#
 draw.circle(6,4,1.5,border=1)#
 draw.circle(8,4,1.6,border=2)#
 legend(1,10,fill=0,border=c(1,2),legend=(c('New Method','Manual Method')))#
 text(0.8,4,'1')#
 text(2.5,4,'2')#
 text(3.9,4,'3')
plot(1:10,1:10,type="n",xlab="",ylab="",frame.plot=F,main="Comparaison llustration",)#
 draw.circle(2.2,4,1.5,border=1)#
 draw.circle(2.5,4,1.6,border=2)#
 draw.circle(6,4,1.5,border=1)#
 draw.circle(8,4,1.6,border=2)#
 legend(1,10,fill=0,border=c(1,2),legend=(c('New Method','Manual Method')))#
 text(0.8,4,'1')#
 text(2.5,4,'2')#
 text(3.9,4,'3')#
 text(0.8,4,'1')#
 text(2.5,4,'2')#
 text(3.9,4,'3')
plot(1:10,1:10,type="n",xlab="",ylab="",frame.plot=F,main="Comparaison llustration",)#
 draw.circle(2.2,4,1.5,border=1)#
 draw.circle(2.5,4,1.6,border=2)#
 draw.circle(6,4,1.5,border=1)#
 draw.circle(8,4,1.6,border=2)#
 legend(1,10,fill=0,border=c(1,2),legend=(c('New Method','Manual Method')))#
 text(0.8,4,'1')#
 text(2.5,4,'2')#
 text(3.9,4,'3')#
 text(5,4,'1')#
 text(7.3,4,'2')#
 text(8.5,4,'3')
plot(1:10,1:10,type="n",xlab="",ylab="",frame.plot=F,main="Comparaison llustration",)#
 draw.circle(2.2,4,1.5,border=1)#
 draw.circle(2.5,4,1.6,border=2)#
 draw.circle(6,4,1.5,border=1)#
 draw.circle(8,4,1.6,border=2)#
 legend(1,10,fill=0,border=c(1,2),legend=(c('New Method','Manual Method')))#
 text(0.8,4,'1')#
 text(2.5,4,'2')#
 text(3.9,4,'3')#
 text(5,4,'1')#
 text(7,4,'2')#
 text(8.5,4,'3')
plot(1:10,1:10,type="n",xlab="",ylab="",frame.plot=F,main="Comparaison llustration",)#
 draw.circle(2.2,4.5,1.5,border=1)#
 draw.circle(2.5,4.5,1.6,border=2)#
 draw.circle(6,4.5,1.5,border=1)#
 draw.circle(8,4.5,1.6,border=2)#
 legend(1,10,fill=0,border=c(1,2),legend=(c('New Method','Manual Method')))#
 text(0.8,4.5,'1')#
 text(2.5,4.5,'2')#
 text(3.9,4.5,'3')#
 text(5,4.5,'1')#
 text(7,4.5,'2')#
 text(8.5,4.5,'3')
plot(1:10,1:10,type="n",xlab="",ylab="",frame.plot=F,main="Comparaison llustration",)#
 draw.circle(2.2,4.5,1.5,border=1)#
 draw.circle(2.5,4.5,1.6,border=2)#
 draw.circle(6,4.5,1.5,border=1)#
 draw.circle(8,4.5,1.6,border=2)#
 legend(1,10,fill=0,border=c(1,2),legend=(c('New Method','Manual Method')))#
 text(0.8,4.5,'1')#
 text(2.5,4.5,'2')#
 text(3.9,4.5,'3')#
 text(5,4.5,'1')#
 text(7,4.5,'2')#
 text(8.5,4.5,'3')#
 text(2.5,1,'Good Scenario')#
 text(7,1,'Bad Scenario')
plot(1:10,1:10,type="n",xlab="",ylab="",frame.plot=F,main="Comparaison llustration",)#
 draw.circle(2.2,4.5,1.5,border=1)#
 draw.circle(2.5,4.5,1.6,border=2)#
 draw.circle(6,4.5,1.5,border=1)#
 draw.circle(8,4.5,1.6,border=2)#
 legend(1,10,fill=0,border=c(1,2),legend=(c('New Method','Manual Method')))#
 text(0.8,4.5,'1')#
 text(2.5,4.5,'2')#
 text(3.9,4.5,'3')#
 text(5,4.5,'1')#
 text(7,4.5,'2')#
 text(8.5,4.5,'3')#
 text(2.5,1,'Good Scenario')#
 text(7,1,'Bad Scenario')#
 text(5,9.5,'1: New method only: dirty non detected')#
 text(5,9.5,'2: Commun: Clean detected')#
 text(5,9.5,'1: manual only: clean non detected or manual correction')
plot(1:10,1:10,type="n",xlab="",ylab="",frame.plot=F,main="Comparaison llustration",sub='#
1: New method only: dirty non detected\n#
2: Commun: Clean detected\n#
3: manual only: clean non detected or manual correction#
')#
 draw.circle(2.2,4.5,1.5,border=1)#
 draw.circle(2.5,4.5,1.6,border=2)#
 draw.circle(6,4.5,1.5,border=1)#
 draw.circle(8,4.5,1.6,border=2)#
 legend(1,10,fill=0,border=c(1,2),legend=(c('New Method','Manual Method')))#
 text(0.8,4.5,'1')#
 text(2.5,4.5,'2')#
 text(3.9,4.5,'3')#
 text(5,4.5,'1')#
 text(7,4.5,'2')#
 text(8.5,4.5,'3')#
 text(2.5,1,'Good Scenario')#
 text(7,1,'Bad Scenario')#
 text(5,9.5,'1: New method only: dirty non detected')#
 text(5,9.5,'2: Commun: Clean detected')#
 text(5,9.5,'1: manual only: clean non detected or manual correction')
plot(1:10,1:10,type="n",xlab="",ylab="",frame.plot=F,main="Comparaison llustration",sub='#
1: New method only: dirty non detected\n#
2: Commun: Clean detected\n#
3: manual only: clean non detected or manual correction#
')#
 draw.circle(2.2,4.5,1.5,border=1)#
 draw.circle(2.5,4.5,1.6,border=2)#
 draw.circle(6,4.5,1.5,border=1)#
 draw.circle(8,4.5,1.6,border=2)#
 legend(1,10,fill=0,border=c(1,2),legend=(c('New Method','Manual Method')))#
 text(0.8,4.5,'1')#
 text(2.5,4.5,'2')#
 text(3.9,4.5,'3')#
 text(5,4.5,'1')#
 text(7,4.5,'2')#
 text(8.5,4.5,'3')#
 text(2.5,1,'Good Scenario')#
 text(7,1,'Bad Scenario')
plot(1:10,1:10,type="n",xlab="",ylab="",frame.plot=F,main="Comparaison llustration",sub='#
1: New method only: dirty non detected#
2: Commun: Clean detected#
3: manual only: clean non detected or manual correction#
')#
 draw.circle(2.2,4.5,1.5,border=1)#
 draw.circle(2.5,4.5,1.6,border=2)#
 draw.circle(6,4.5,1.5,border=1)#
 draw.circle(8,4.5,1.6,border=2)#
 legend(1,10,fill=0,border=c(1,2),legend=(c('New Method','Manual Method')))#
 text(0.8,4.5,'1')#
 text(2.5,4.5,'2')#
 text(3.9,4.5,'3')#
 text(5,4.5,'1')#
 text(7,4.5,'2')#
 text(8.5,4.5,'3')#
 text(2.5,1,'Good Scenario')#
 text(7,1,'Bad Scenario')
plot(1:10,1:10,type="n",xlab="",ylab="",axes=F,frame.plot=F,main="Comparaison llustration",sub='#
1: New method only: dirty non detected#
2: Commun: Clean detected#
3: manual only: clean non detected or manual correction#
')#
 draw.circle(2.2,4.5,1.5,border=1)#
 draw.circle(2.5,4.5,1.6,border=2)#
 draw.circle(6,4.5,1.5,border=1)#
 draw.circle(8,4.5,1.6,border=2)#
 legend(1,10,fill=0,border=c(1,2),legend=(c('New Method','Manual Method')))#
 text(0.8,4.5,'1')#
 text(2.5,4.5,'2')#
 text(3.9,4.5,'3')#
 text(5,4.5,'1')#
 text(7,4.5,'2')#
 text(8.5,4.5,'3')#
 text(2.5,1,'Good Scenario')#
 text(7,1,'Bad Scenario')
plot(1:10,1:10,type="n",xlab="",ylab="",axes=F,frame.plot=F,main="Comparaison llustration",sub='#
1: New method only: dirty non detected#
2: Commun: Clean detected#
3: manual only: clean non detected or manual correction#
')#
 draw.circle(2.2,4.5,1.5,border=1)#
 draw.circle(2.5,4.5,1.6,border=2)#
 draw.circle(6,4.5,1.5,border=1)#
 draw.circle(8,4.5,1.6,border=2)#
 legend(1,10,fill=0,border=c(1,2),legend=(c('New Method','Manual Method')))#
 text(0.8,4.5,'1')#
 text(2.5,4.5,'2')#
 text(3.9,4.5,'3')#
 text(5,4.5,'1')#
 text(7,4.5,'2')#
 text(8.5,4.5,'3')#
 text(2.5,1,'Good Scenario#
 Commun big')#
 text(7,1,'Bad Scenario#
 Commun small')
plot(1:10,1:10,type="n",xlab="",ylab="",axes=F,frame.plot=F,main="Comparaison llustration",sub='#
1: New method only: dirty non detected by the new method#
2: Commun: Clean detected by both method#
3: manual only: clean non detected or manual correction#
')#
 draw.circle(2.2,4.5,1.5,border=1)#
 draw.circle(2.5,4.5,1.6,border=2)#
 draw.circle(6,4.5,1.5,border=1)#
 draw.circle(8,4.5,1.6,border=2)#
 legend(1,10,fill=0,border=c(1,2),legend=(c('New Method','Manual Method')))#
 text(0.8,4.5,'1')#
 text(2.5,4.5,'2')#
 text(3.9,4.5,'3')#
 text(5,4.5,'1')#
 text(7,4.5,'2')#
 text(8.5,4.5,'3')#
 text(2.5,1,'Good Scenario: 2 big')#
 text(7,1,'Bad Scenario: 2 small')
plot(1:10,1:10,type="n",xlab="",ylab="",axes=F,frame.plot=F,main="Comparaison illustration",sub='#
1: New method only: dirty non detected by the new method#
2: Commun: Clean detected by both method#
3: manual only: clean non detected or manual correction#
')#
 draw.circle(2.2,4.5,1.5,border=1)#
 draw.circle(2.5,4.5,1.6,border=2)#
 draw.circle(6,4.5,1.5,border=1)#
 draw.circle(8,4.5,1.6,border=2)#
 legend(1,10,fill=0,border=c(1,2),legend=(c('New Method','Manual Method')))#
 text(0.8,4.5,'1')#
 text(2.5,4.5,'2')#
 text(3.9,4.5,'3')#
 text(5,4.5,'1')#
 text(7,4.5,'2')#
 text(8.5,4.5,'3')#
 text(2.5,1,'Good Scenario: 2 big')#
 text(7,1,'Bad Scenario: 2 small')
plot(1:10,1:10,type="n",xlab="",ylab="",axes=F,frame.plot=F,main="Comparaison illustration:#
Intersection of the two TMX",sub='#
1: New method only: dirty non detected by the new method#
2: Commun: Clean detected by both method#
3: manual only: clean non detected or manual correction#
')#
 draw.circle(2.2,4.5,1.5,border=1)#
 draw.circle(2.5,4.5,1.6,border=2)#
 draw.circle(6,4.5,1.5,border=1)#
 draw.circle(8,4.5,1.6,border=2)#
 legend(1,10,fill=0,border=c(1,2),legend=(c('New Method','Manual Method')))#
 text(0.8,4.5,'1')#
 text(2.5,4.5,'2')#
 text(3.9,4.5,'3')#
 text(5,4.5,'1')#
 text(7,4.5,'2')#
 text(8.5,4.5,'3')#
 text(2.5,1,'Good Scenario: 2 big')#
 text(7,1,'Bad Scenario: 2 small')
shiny::runApp("~/Dropbox/rTMX/flyRtmx",launch.browser = T)
load("~/Downloads/flyRtmx file to compare/df.Rdata")
library(ggplot2)
df
colnames(df) <- c('TMX','BL1','BL2','ToolOnLine','Clean','Rec','2: Commun','3: Manual','1: auto','3/(2+3)','1/(2+1)')
df
p <- ggplot(aes(y='1/(2+1)',col=BL1))+geom_point()
p <- ggplot(aes(y=2: Commun,col=BL1))+geom_point()
plot(data[,'1/(2+1)'])
plot(df[,'1/(2+1)'])
p <- ggplot(aes(y='1/(2+1)',col=BL1),dafa=df)+geom_point()
colnames(df) <- seq(ncol(data))
p <- ggplot(aes(y=11,col=BL1),dafa=df)+geom_point()
qpolt(factor(2),11,geom='bar',stat='identity')
qplot(factor(2),11,geom='bar',stat='identity')
qplot(factor(data[,2]),data[,11],geom='bar',stat='identity')
qplot(factor(df[,2]),df[,11],geom='bar',stat='identity')
qplot(factor(df[,2]),df[,11],geom='point',stat='identity')
shiny::runApp("~/Dropbox/rTMX/RdataReader",launch.browser=TRUE)
library(shinydashboard)#
#
ui <- dashboardPage(#
  dashboardHeader(title = "Info boxes"),#
  dashboardSidebar(),#
  dashboardBody(#
    # infoBoxes with fill=FALSE#
    fluidRow(#
      # A static infoBox#
      infoBox("New Orders", 10 * 2, icon = icon("credit-card")),#
      # Dynamic infoBoxes#
      infoBoxOutput("progressBox"),#
      infoBoxOutput("approvalBox")#
    ),#
#
    # infoBoxes with fill=TRUE#
    fluidRow(#
      infoBox("New Orders", 10 * 2, icon = icon("credit-card"), fill = TRUE),#
      infoBoxOutput("progressBox2"),#
      infoBoxOutput("approvalBox2")#
    ),#
#
    fluidRow(#
      # Clicking this will increment the progress amount#
      box(width = 4, actionButton("count", "Increment progress"))#
    )#
  )#
)#
#
server <- function(input, output) {#
  output$progressBox <- renderInfoBox({#
    infoBox(#
      "Progress", paste0(25 + input$count, "%"), icon = icon("list"),#
      color = "purple"#
    )#
  })#
  output$approvalBox <- renderInfoBox({#
    infoBox(#
      "Approval", "80%", icon = icon("thumbs-up", lib = "glyphicon"),#
      color = "yellow"#
    )#
  })#
#
  # Same as above, but with fill=TRUE#
  output$progressBox2 <- renderInfoBox({#
    infoBox(#
      "Progress", paste0(25 + input$count, "%"), icon = icon("list"),#
      color = "purple", fill = TRUE#
    )#
  })#
  output$approvalBox2 <- renderInfoBox({#
    infoBox(#
      "Approval", "80%", icon = icon("thumbs-up", lib = "glyphicon"),#
      color = "yellow", fill = TRUE#
    )#
  })#
}#
#
shinyApp(ui, server)
library(shinydashboard)#
#
ui <- dashboardPage(#
  dashboardHeader(title = "Info boxes"),#
  dashboardSidebar(),#
  dashboardBody(#
    # infoBoxes with fill=TRUE#
    fluidRow(#
      infoBoxOutput("progressBox2")#
    ),#
#
    fluidRow(#
      # Clicking this will increment the progress amount#
      box(width = 4, actionButton("count", "Increment progress"))#
    )#
  )#
)#
#
server <- function(input, output) {#
  # Same as above, but with fill=TRUE#
  output$progressBox2 <- renderInfoBox({#
    infoBox(#
      "Progress", paste0(25 + input$count, "%"), icon = icon("list"),#
      color = "purple", fill = TRUE#
    )#
  })#
#
}#
#
shinyApp(ui, server)
ui <- dashboardPage(#
  dashboardHeader(title = "Dynamic boxes"),#
  dashboardSidebar(),#
  dashboardBody(#
    fluidRow(#
      box(width = 2, actionButton("count", "Count")),#
      infoBoxOutput("ibox"),#
      valueBoxOutput("vbox")#
    )#
  )#
)#
#
server <- function(input, output) {#
  output$ibox <- renderInfoBox({#
    infoBox(#
      "Title",#
      input$count,#
      icon = icon("credit-card")#
    )#
  })#
  output$vbox <- renderValueBox({#
    valueBox(#
      "Title",#
      input$count,#
      icon = icon("credit-card")#
    )#
  })#
}#
#
shinyApp(ui, server)
library(shinydashboard)#
#
TMX.upload <- F #Red#
Recette.upload <- F#orange#
Recette.visit <- F#Red#
TMX.read <- F#Red#
TMX.extrat <- F#Red#
Fingerprint.upload <- F#Red#
Baseline.upload <- F#orange#
Labelisation <- F#Red#
Model.train <- F#Red#
ui <- dashboardPage(#
  dashboardHeader(title = "Info boxes"),#
  dashboardSidebar(),#
  dashboardBody(#
    # infoBoxes with fill=TRUE#
    fluidRow(#
      infoBoxOutput("progressBox2"),#
      infoBoxOutput("ibox"),#
      valueBoxOutput("vbox")#
    ),#
#
    fluidRow(#
      # Clicking this will increment the progress amount#
      box(width = 4, actionButton("count", "Increment progress"))#
    )#
  )#
)#
#
server <- function(input, output) {#
  # Same as above, but with fill=TRUE#
  output$progressBox2 <- renderInfoBox({#
    infoBox(#
      "Progress", paste0(25 + input$count, "%"), icon = icon("list"),#
      color = "purple", fill = TRUE#
    )#
  })#
  output$ibox <- renderInfoBox({#
    infoBox(#
      "Title",#
      input$count,#
      icon = icon("credit-card")#
    )#
  })#
  output$vbox <- renderValueBox({#
    valueBox(#
      "Title",#
      input$count,#
      icon = icon("credit-card")#
    )#
  })#
}#
#
shinyApp(ui, server)
library(shinydashboard)#
#
TMX.upload <- F #Red#
Recette.upload <- F#orange#
Recette.visit <- F#Red#
TMX.read <- F#Red#
TMX.extrat <- F#Red#
Fingerprint.upload <- F#Red#
Baseline.upload <- F#orange#
Labelisation <- F#Red#
Model.train <- F#Red#
ui <- dashboardPage(#
dropdownMenu(type = "notifications",#
  notificationItem(#
    text = "5 new users today",#
    icon("users")#
  ),#
  notificationItem(#
    text = "12 items delivered",#
    icon("truck"),#
    status = "success"#
  ),#
  notificationItem(#
    text = "Server load at 86%",#
    icon = icon("exclamation-triangle"),#
    status = "warning"#
  )#
),#
  dashboardHeader(title = "Info boxes"),#
  dashboardSidebar(),#
  dashboardBody(#
    # infoBoxes with fill=TRUE#
    fluidRow(#
      infoBoxOutput("progressBox2"),#
      infoBoxOutput("ibox"),#
      valueBoxOutput("vbox")#
    ),#
#
    fluidRow(#
      # Clicking this will increment the progress amount#
      box(width = 4, actionButton("count", "Increment progress"))#
    )#
  )#
)#
#
server <- function(input, output) {#
  # Same as above, but with fill=TRUE#
  output$progressBox2 <- renderInfoBox({#
    infoBox(#
      "Progress", paste0(25 + input$count, "%"), icon = icon("list"),#
      color = "purple", fill = TRUE#
    )#
  })#
  output$ibox <- renderInfoBox({#
    infoBox(#
      "Title",#
      input$count,#
      icon = icon("credit-card")#
    )#
  })#
  output$vbox <- renderValueBox({#
    valueBox(#
      "Title",#
      input$count,#
      icon = icon("credit-card")#
    )#
  })#
}#
#
shinyApp(ui, server)
library(shinydashboard)#
#
TMX.upload <- F #Red#
Recette.upload <- F#orange#
Recette.visit <- F#Red#
TMX.read <- F#Red#
TMX.extrat <- F#Red#
Fingerprint.upload <- F#Red#
Baseline.upload <- F#orange#
Labelisation <- F#Red#
Model.train <- F#Red#
ui <- dashboardPage(#
#
  dashboardHeader(title = "Info boxes",#
  dropdownMenu(type = "notifications",#
  notificationItem(#
    text = "5 new users today",#
    icon("users")#
  ),#
  notificationItem(#
    text = "12 items delivered",#
    icon("truck"),#
    status = "success"#
  ),#
  notificationItem(#
    text = "Server load at 86%",#
    icon = icon("exclamation-triangle"),#
    status = "warning"#
  )#
),#
  ),#
  dashboardSidebar(),#
  dashboardBody(#
    # infoBoxes with fill=TRUE#
    fluidRow(#
      infoBoxOutput("progressBox2"),#
      infoBoxOutput("ibox"),#
      valueBoxOutput("vbox")#
    ),#
#
    fluidRow(#
      # Clicking this will increment the progress amount#
      box(width = 4, actionButton("count", "Increment progress"))#
    )#
  )#
)#
#
server <- function(input, output) {#
  # Same as above, but with fill=TRUE#
  output$progressBox2 <- renderInfoBox({#
    infoBox(#
      "Progress", paste0(25 + input$count, "%"), icon = icon("list"),#
      color = "purple", fill = TRUE#
    )#
  })#
  output$ibox <- renderInfoBox({#
    infoBox(#
      "Title",#
      input$count,#
      icon = icon("credit-card")#
    )#
  })#
  output$vbox <- renderValueBox({#
    valueBox(#
      "Title",#
      input$count,#
      icon = icon("credit-card")#
    )#
  })#
}#
#
shinyApp(ui, server)
library(shinydashboard)#
#
TMX.upload <- F #Red#
Recette.upload <- F#orange#
Recette.visit <- F#Red#
TMX.read <- F#Red#
TMX.extrat <- F#Red#
Fingerprint.upload <- F#Red#
Baseline.upload <- F#orange#
Labelisation <- F#Red#
Model.train <- F#Red#
ui <- dashboardPage(#
#
  dashboardHeader(title = "Info boxes",dropdownMenuOutput("messageMenu")#
#
  ),#
  dashboardSidebar(),#
  dashboardBody(#
    # infoBoxes with fill=TRUE#
    fluidRow(#
      infoBoxOutput("progressBox2"),#
      infoBoxOutput("ibox"),#
      valueBoxOutput("vbox")#
    ),#
#
    fluidRow(#
      # Clicking this will increment the progress amount#
      box(width = 4, actionButton("count", "Increment progress"))#
    )#
  )#
)#
#
server <- function(input, output) {#
  # Same as above, but with fill=TRUE#
  output$progressBox2 <- renderInfoBox({#
    infoBox(#
      "Progress", paste0(25 + input$count, "%"), icon = icon("list"),#
      color = "purple", fill = TRUE#
    )#
  })#
  output$ibox <- renderInfoBox({#
    infoBox(#
      "Title",#
      input$count,#
      icon = icon("credit-card")#
    )#
  })#
  output$vbox <- renderValueBox({#
    valueBox(#
      "Title",#
      input$count,#
      icon = icon("credit-card")#
    )#
  })#
  output$messageMenu <- renderMenu({#
  # Code to generate each of the messageItems here, in a list. This assumes#
  # that messageData is a data frame with two columns, 'from' and 'message'.#
  msgs <- apply(messageData, 1, function(row) {#
    messageItem(from = row[["from"]], message = row[["message"]])#
  })#
#
  # This is equivalent to calling:#
  #   dropdownMenu(type="messages", msgs[[1]], msgs[[2]], ...)#
  dropdownMenu(type = "messages", .list = msgs)#
})#
#
}#
#
shinyApp(ui, server)
library(shinydashboard)#
#
TMX.upload <- F #Red#
Recette.upload <- F#orange#
Recette.visit <- F#Red#
TMX.read <- F#Red#
TMX.extrat <- F#Red#
Fingerprint.upload <- T#Red#
Baseline.upload <- F#orange#
Labelisation <- F#Red#
Model.train <- F#Red#
ui <- dashboardPage(#
#
  dashboardHeader(title = "Info boxes",dropdownMenuOutput("messageMenu")#
#
  ),#
  dashboardSidebar(),#
  dashboardBody(#
    # infoBoxes with fill=TRUE#
    fluidRow(#
      infoBoxOutput("progressBox2"),#
      infoBoxOutput("ibox"),#
      valueBoxOutput("vbox")#
    ),#
#
    fluidRow(#
      # Clicking this will increment the progress amount#
      box(width = 4, actionButton("count", "Increment progress"))#
    )#
  )#
)#
#
server <- function(input, output) {#
  task.list() <- reactive({#
  	truc <- list()#
  	if(TMX.upload==T){list$TMX.upload <- taskItem('Upload the TMX file', value = 1, color = "green")}else{list$TMX.upload <- taskItem('Upload the TMX file', value = 0, color = "red")}#
  	if(fingerprint.upload==T){list$fingerprint.upload <- taskItem('Upload the fingerprint file', value = 1, color = "green")}else{list$fingerprint.upload <- taskItem('Upload the fingerprint file', value = 0, color = "red")}#
  })#
  output$messageMenu <- renderMenu({#
  dropdownMenu(type = "task", .list = task.list())#
})#
#
}#
#
shinyApp(ui, server)
library(shinydashboard)#
#
TMX.upload <- F #Red#
Recette.upload <- F#orange#
Recette.visit <- F#Red#
TMX.read <- F#Red#
TMX.extrat <- F#Red#
Fingerprint.upload <- T#Red#
Baseline.upload <- F#orange#
Labelisation <- F#Red#
Model.train <- F#Red#
ui <- dashboardPage(#
#
  dashboardHeader(title = "Info boxes",dropdownMenuOutput("messageMenu")#
#
  ),#
  dashboardSidebar(),#
  dashboardBody(#
    # infoBoxes with fill=TRUE#
    fluidRow(#
      infoBoxOutput("progressBox2"),#
      infoBoxOutput("ibox"),#
      valueBoxOutput("vbox")#
    ),#
#
    fluidRow(#
      # Clicking this will increment the progress amount#
      box(width = 4, actionButton("count", "Increment progress"))#
    )#
  )#
)#
#
server <- function(input, output) {#
  task.list <- reactive({#
  	truc <- list()#
  	if(TMX.upload==T){list$TMX.upload <- taskItem('Upload the TMX file', value = 1, color = "green")}else{list$TMX.upload <- taskItem('Upload the TMX file', value = 0, color = "red")}#
  	if(fingerprint.upload==T){list$fingerprint.upload <- taskItem('Upload the fingerprint file', value = 1, color = "green")}else{list$fingerprint.upload <- taskItem('Upload the fingerprint file', value = 0, color = "red")}#
  })#
  output$messageMenu <- renderMenu({#
  dropdownMenu(type = "task", .list = task.list())#
})#
#
}#
#
shinyApp(ui, server)
library(shinydashboard)#
#
TMX.upload <- F #Red#
Recette.upload <- F#orange#
Recette.visit <- F#Red#
TMX.read <- F#Red#
TMX.extrat <- F#Red#
Fingerprint.upload <- T#Red#
Baseline.upload <- F#orange#
Labelisation <- F#Red#
Model.train <- F#Red#
ui <- dashboardPage(#
#
  dashboardHeader(title = "Info boxes",dropdownMenuOutput("messageMenu")#
#
  ),#
  dashboardSidebar(),#
  dashboardBody(#
    # infoBoxes with fill=TRUE#
    fluidRow(#
      infoBoxOutput("progressBox2"),#
      infoBoxOutput("ibox"),#
      valueBoxOutput("vbox")#
    ),#
#
    fluidRow(#
      # Clicking this will increment the progress amount#
      box(width = 4, actionButton("count", "Increment progress"))#
    )#
  )#
)#
#
server <- function(input, output) {#
  task.list <- reactive({#
  	truc <- list()#
  	if(TMX.upload==T){truc$TMX.upload <- taskItem('Upload the TMX file', value = 1, color = "green")}else{truc$TMX.upload <- taskItem('Upload the TMX file', value = 0, color = "red")}#
  	if(fingerprint.upload==T){truc$fingerprint.upload <- taskItem('Upload the fingerprint file', value = 1, color = "green")}else{truc$fingerprint.upload <- taskItem('Upload the fingerprint file', value = 0, color = "red")}#
  	return(truc)#
  })#
  output$messageMenu <- renderMenu({#
  dropdownMenu(type = "task", .list = task.list())#
})#
#
}#
#
shinyApp(ui, server)
library(shinydashboard)#
#
TMX.upload <- F #Red#
Recette.upload <- F#orange#
Recette.visit <- F#Red#
TMX.read <- F#Red#
TMX.extrat <- F#Red#
fingerprint.upload <- T#Red#
Baseline.upload <- F#orange#
Labelisation <- F#Red#
Model.train <- F#Red#
ui <- dashboardPage(#
#
  dashboardHeader(title = "Info boxes",dropdownMenuOutput("messageMenu")#
#
  ),#
  dashboardSidebar(),#
  dashboardBody(#
    # infoBoxes with fill=TRUE#
    fluidRow(#
      infoBoxOutput("progressBox2"),#
      infoBoxOutput("ibox"),#
      valueBoxOutput("vbox")#
    ),#
#
    fluidRow(#
      # Clicking this will increment the progress amount#
      box(width = 4, actionButton("count", "Increment progress"))#
    )#
  )#
)#
#
server <- function(input, output) {#
  task.list <- reactive({#
  	truc <- list()#
  	if(TMX.upload==T){truc$TMX.upload <- taskItem('Upload the TMX file', value = 1, color = "green")}else{truc$TMX.upload <- taskItem('Upload the TMX file', value = 0, color = "red")}#
  	if(fingerprint.upload==T){truc$fingerprint.upload <- taskItem('Upload the fingerprint file', value = 1, color = "green")}else{truc$fingerprint.upload <- taskItem('Upload the fingerprint file', value = 0, color = "red")}#
  	return(truc)#
  })#
  output$messageMenu <- renderMenu({#
  dropdownMenu(type = "task", .list = task.list())#
})#
#
}#
#
shinyApp(ui, server)
library(shinydashboard)#
#
TMX.upload <- F #Red#
Recette.upload <- F#orange#
Recette.visit <- F#Red#
TMX.read <- F#Red#
TMX.extrat <- F#Red#
fingerprint.upload <- T#Red#
Baseline.upload <- F#orange#
Labelisation <- F#Red#
Model.train <- F#Red#
ui <- dashboardPage(#
#
  dashboardHeader(title = "Info boxes",dropdownMenuOutput("messageMenu")#
#
  ),#
  dashboardSidebar(),#
  dashboardBody(#
    # infoBoxes with fill=TRUE#
    fluidRow(#
      infoBoxOutput("progressBox2"),#
      infoBoxOutput("ibox"),#
      valueBoxOutput("vbox")#
    ),#
#
    fluidRow(#
      # Clicking this will increment the progress amount#
      box(width = 4, actionButton("count", "Increment progress"))#
    )#
  )#
)#
#
server <- function(input, output) {#
  task.list <- reactive({#
  	truc <- list()#
  	if(TMX.upload==T){truc$TMX.upload <- notificationItem('Upload the TMX file', value = 1, color = "green")}else{truc$TMX.upload <- notificationItem('Upload the TMX file', value = 0, color = "red")}#
  	if(fingerprint.upload==T){truc$fingerprint.upload <- notificationItem('Upload the fingerprint file', value = 1, color = "green")}else{truc$fingerprint.upload <- notificationItem('Upload the fingerprint file', value = 0, color = "red")}#
  	return(truc)#
  })#
  output$messageMenu <- renderMenu({#
  dropdownMenu(type = "notification", .list = task.list())#
})#
#
}#
#
shinyApp(ui, server)
library(shinydashboard)#
#
TMX.upload <- F #Red#
Recette.upload <- F#orange#
Recette.visit <- F#Red#
TMX.read <- F#Red#
TMX.extrat <- F#Red#
fingerprint.upload <- T#Red#
Baseline.upload <- F#orange#
Labelisation <- F#Red#
Model.train <- F#Red#
ui <- dashboardPage(#
#
  dashboardHeader(title = "Info boxes",dropdownMenuOutput("messageMenu")#
#
  ),#
  dashboardSidebar(),#
  dashboardBody(#
    # infoBoxes with fill=TRUE#
    fluidRow(#
      infoBoxOutput("progressBox2"),#
      infoBoxOutput("ibox"),#
      valueBoxOutput("vbox")#
    ),#
#
    fluidRow(#
      # Clicking this will increment the progress amount#
      box(width = 4, actionButton("count", "Increment progress"))#
    )#
  )#
)#
#
server <- function(input, output) {#
  task.list <- reactive({#
  	truc <- list()#
  	if(TMX.upload==T){truc$TMX.upload <- notificationItem('Upload the TMX file', icon='fa-thumbs-o-up', status = "success")}else{truc$TMX.upload <- notificationItem('Upload the TMX file', , icon='fa-thumbs-o-up', status = "danger")}#
  	if(fingerprint.upload==T){truc$fingerprint.upload <- notificationItem('Upload the fingerprint file', , icon='fa-thumbs-o-up', status = "success")}else{truc$fingerprint.upload <- notificationItem('Upload the fingerprint file', , icon='fa-thumbs-o-up', status = "danger")}#
  	return(truc)#
  })#
  output$messageMenu <- renderMenu({#
  dropdownMenu(type = "notification", .list = task.list())#
})#
#
}#
#
shinyApp(ui, server)
library(shinydashboard)#
#
TMX.upload <- F #Red#
Recette.upload <- F#orange#
Recette.visit <- F#Red#
TMX.read <- F#Red#
TMX.extrat <- F#Red#
fingerprint.upload <- T#Red#
Baseline.upload <- F#orange#
Labelisation <- F#Red#
Model.train <- F#Red#
ui <- dashboardPage(#
#
  dashboardHeader(title = "Info boxes",dropdownMenuOutput("messageMenu")#
#
  ),#
  dashboardSidebar(),#
  dashboardBody(#
    # infoBoxes with fill=TRUE#
    fluidRow(#
      infoBoxOutput("progressBox2"),#
      infoBoxOutput("ibox"),#
      valueBoxOutput("vbox")#
    ),#
#
    fluidRow(#
      # Clicking this will increment the progress amount#
      box(width = 4, actionButton("count", "Increment progress"))#
    )#
  )#
)#
#
server <- function(input, output) {#
  task.list <- reactive({#
  	truc <- list()#
  	if(TMX.upload==T){truc$TMX.upload <- notificationItem('Upload the TMX file', icon=shiny::icon("fa-thumbs-o-up"), status = "success")}else{truc$TMX.upload <- notificationItem('Upload the TMX file', , icon=shiny::icon("warning"), status = "danger")}#
  	if(fingerprint.upload==T){truc$fingerprint.upload <- notificationItem('Upload the fingerprint file', , icon=shiny::icon("fa-thumbs-o-up"), status = "success")}else{truc$fingerprint.upload <- notificationItem('Upload the fingerprint file', , icon=shiny::icon("warning"), status = "danger")}#
  	return(truc)#
  })#
  output$messageMenu <- renderMenu({#
  dropdownMenu(type = "notification", .list = task.list())#
})#
#
}#
#
shinyApp(ui, server)
library(shinydashboard)#
#
TMX.upload <- F #Red#
Recette.upload <- F#orange#
Recette.visit <- F#Red#
TMX.read <- F#Red#
TMX.extrat <- F#Red#
fingerprint.upload <- T#Red#
Baseline.upload <- F#orange#
Labelisation <- F#Red#
Model.train <- F#Red#
ui <- dashboardPage(#
#
  dashboardHeader(title = "Info boxes",dropdownMenuOutput("messageMenu")#
#
  ),#
  dashboardSidebar(),#
  dashboardBody(#
    # infoBoxes with fill=TRUE#
    fluidRow(#
      infoBoxOutput("progressBox2"),#
      infoBoxOutput("ibox"),#
      valueBoxOutput("vbox")#
    ),#
#
    fluidRow(#
      # Clicking this will increment the progress amount#
      box(width = 4, actionButton("count", "Increment progress"))#
    )#
  )#
)#
#
server <- function(input, output) {#
  task.list <- reactive({#
  	truc <- list()#
  	if(TMX.upload==T){truc$TMX.upload <- notificationItem('Upload the TMX file', icon=shiny::icon("fa-thumbs-o-up"), status = "success")}else{truc$TMX.upload <- notificationItem('Upload the TMX file', , icon=shiny::icon("warning"), status = "danger")}#
  	if(fingerprint.upload==T){truc$fingerprint.upload <- notificationItem('Upload the fingerprint file', , icon=shiny::icon("fa-thumbs-o-up"), status = "success")}else{truc$fingerprint.upload <- notificationItem('Upload the fingerprint file', , icon=shiny::icon("warning"), status = "danger")}#
  	return(truc)#
  })#
  output$messageMenu <- renderMenu({#
  dropdownMenu(type = "notification", .list = task.list(),badgeStatus = "primary")#
})#
#
}#
#
shinyApp(ui, server)
library(shinydashboard)#
#
TMX.upload <- F #Red#
Recette.upload <- F#orange#
Recette.visit <- F#Red#
TMX.read <- F#Red#
TMX.extrat <- F#Red#
fingerprint.upload <- T#Red#
Baseline.upload <- F#orange#
Labelisation <- F#Red#
Model.train <- F#Red#
ui <- dashboardPage(#
#
  dashboardHeader(title = "Info boxes",dropdownMenuOutput("messageMenu")#
#
  ),#
  dashboardSidebar(),#
  dashboardBody(#
    # infoBoxes with fill=TRUE#
    fluidRow(#
      infoBoxOutput("progressBox2"),#
      infoBoxOutput("ibox"),#
      valueBoxOutput("vbox")#
    ),#
#
    fluidRow(#
      # Clicking this will increment the progress amount#
      box(width = 4, actionButton("count", "Increment progress"))#
    )#
  )#
)#
#
server <- function(input, output) {#
  task.list <- reactive({#
  	truc <- list()#
  	if(TMX.upload==T){truc$TMX.upload <- notificationItem('Upload the TMX file', icon=shiny::icon("fa-thumbs-o-up"), status = "success")}else{truc$TMX.upload <- notificationItem('Upload the TMX file', , icon=shiny::icon("warning"), status = "danger")}#
  	if(fingerprint.upload==T){truc$fingerprint.upload <- notificationItem('Upload the fingerprint file', , icon=shiny::icon("fa-thumbs-o-up"), status = "success")}else{truc$fingerprint.upload <- notificationItem('Upload the fingerprint file', , icon=shiny::icon("warning"), status = "danger")}#
  	return(truc)#
  })#
  output$messageMenu <- renderMenu({#
  dropdownMenu(type = "notification", .list = task.list(),badgeStatus = "warning")#
})#
#
}#
#
shinyApp(ui, server)
library(shinydashboard)#
#
TMX.upload <- F #Red#
Recette.upload <- F#orange#
Recette.visit <- F#Red#
TMX.read <- F#Red#
TMX.extrat <- F#Red#
fingerprint.upload <- T#Red#
Baseline.upload <- F#orange#
Labelisation <- F#Red#
Model.train <- F#Red#
ui <- dashboardPage(#
#
  dashboardHeader(title = "Info boxes",dropdownMenuOutput("messageMenu")#
#
  ),#
  dashboardSidebar(),#
  dashboardBody(#
    # infoBoxes with fill=TRUE#
    fluidRow(#
      infoBoxOutput("progressBox2"),#
      infoBoxOutput("ibox"),#
      valueBoxOutput("vbox")#
    ),#
#
    fluidRow(#
      # Clicking this will increment the progress amount#
      box(width = 4, actionButton("count", "Increment progress"))#
    )#
  )#
)#
#
server <- function(input, output) {#
  task.list <- reactive({#
  	truc <- list()#
  	if(TMX.upload==T){truc$TMX.upload <- notificationItem('Upload the TMX file', icon=shiny::icon("industry"), status = "success")}else{truc$TMX.upload <- notificationItem('Upload the TMX file', , icon=shiny::icon("warning"), status = "danger")}#
  	if(fingerprint.upload==T){truc$fingerprint.upload <- notificationItem('Upload the fingerprint file', , icon=shiny::icon("fa-thumbs-o-up"), status = "success")}else{truc$fingerprint.upload <- notificationItem('Upload the fingerprint file', , icon=shiny::icon("warning"), status = "danger")}#
  	return(truc)#
  })#
  output$messageMenu <- renderMenu({#
  dropdownMenu(type = "task", .list = task.list(),badgeStatus = "warning")#
})#
#
}#
#
shinyApp(ui, server)
library(shinydashboard)#
#
TMX.upload <- F #Red#
Recette.upload <- F#orange#
Recette.visit <- F#Red#
TMX.read <- F#Red#
TMX.extrat <- F#Red#
fingerprint.upload <- T#Red#
Baseline.upload <- F#orange#
Labelisation <- F#Red#
Model.train <- F#Red#
ui <- dashboardPage(#
#
  dashboardHeader(title = "Info boxes",dropdownMenuOutput("messageMenu")#
#
  ),#
  dashboardSidebar(),#
  dashboardBody(#
    # infoBoxes with fill=TRUE#
    fluidRow(#
      infoBoxOutput("progressBox2"),#
      infoBoxOutput("ibox"),#
      valueBoxOutput("vbox")#
    ),#
#
    fluidRow(#
      # Clicking this will increment the progress amount#
      box(width = 4, actionButton("count", "Increment progress"))#
    )#
  )#
)#
#
server <- function(input, output) {#
  task.list <- reactive({#
  	truc <- list()#
  	if(TMX.upload==T){truc$TMX.upload <- notificationItem('Upload the TMX file', icon=icon("industry"), status = "success")}else{truc$TMX.upload <- notificationItem('Upload the TMX file', , icon=shiny::icon("warning"), status = "danger")}#
  	if(fingerprint.upload==T){truc$fingerprint.upload <- notificationItem('Upload the fingerprint file', , icon=shiny::icon("fa-thumbs-o-up"), status = "success")}else{truc$fingerprint.upload <- notificationItem('Upload the fingerprint file', , icon=shiny::icon("warning"), status = "danger")}#
  	return(truc)#
  })#
  output$messageMenu <- renderMenu({#
  dropdownMenu(type = "task", .list = task.list(),badgeStatus = "warning")#
})#
#
}#
#
shinyApp(ui, server)
library(shinydashboard)#
#
TMX.upload <- F #Red#
Recette.upload <- F#orange#
Recette.visit <- F#Red#
TMX.read <- F#Red#
TMX.extrat <- F#Red#
fingerprint.upload <- T#Red#
Baseline.upload <- F#orange#
Labelisation <- F#Red#
Model.train <- F#Red#
ui <- dashboardPage(#
#
  dashboardHeader(title = "Info boxes",dropdownMenuOutput("messageMenu")#
#
  ),#
  dashboardSidebar(),#
  dashboardBody(#
    # infoBoxes with fill=TRUE#
    fluidRow(#
      infoBoxOutput("progressBox2"),#
      infoBoxOutput("ibox"),#
      valueBoxOutput("vbox")#
    ),#
#
    fluidRow(#
      # Clicking this will increment the progress amount#
      box(width = 4, actionButton("count", "Increment progress"))#
    )#
  )#
)#
#
server <- function(input, output) {#
  task.list <- reactive({#
  	truc <- list()#
  	if(TMX.upload==T){truc$TMX.upload <- notificationItem('Upload the TMX file', icon=icon("industry"), status = "success")}else{truc$TMX.upload <- notificationItem('Upload the TMX file', , icon=shiny::icon("warning"), status = "danger")}#
  	if(fingerprint.upload==T){truc$fingerprint.upload <- notificationItem('Upload the fingerprint file', , icon=shiny::icon("fa-thumbs-o-up"), status = "success")}else{truc$fingerprint.upload <- notificationItem('Upload the fingerprint file', , icon("cog", lib = "glyphicon")#
, status = "danger")}#
  	return(truc)#
  })#
  output$messageMenu <- renderMenu({#
  dropdownMenu(type = "task", .list = task.list(),badgeStatus = "warning")#
})#
#
}#
#
shinyApp(ui, server)
library(shinydashboard)#
#
TMX.upload <- F #Red#
Recette.upload <- F#orange#
Recette.visit <- F#Red#
TMX.read <- F#Red#
TMX.extrat <- F#Red#
fingerprint.upload <- T#Red#
Baseline.upload <- F#orange#
Labelisation <- F#Red#
Model.train <- F#Red#
ui <- dashboardPage(#
#
  dashboardHeader(title = "Info boxes",dropdownMenuOutput("messageMenu")#
#
  ),#
  dashboardSidebar(),#
  dashboardBody(#
    # infoBoxes with fill=TRUE#
    fluidRow(#
      infoBoxOutput("progressBox2"),#
      infoBoxOutput("ibox"),#
      valueBoxOutput("vbox")#
    ),#
#
    fluidRow(#
      # Clicking this will increment the progress amount#
      box(width = 4, actionButton("count", "Increment progress"))#
    )#
  )#
)#
#
server <- function(input, output) {#
  task.list <- reactive({#
  	truc <- list()#
  	if(TMX.upload==T){truc$TMX.upload <- notificationItem('Upload the TMX file', icon=icon("industry"), status = "success")}else{truc$TMX.upload <- notificationItem('Upload the TMX file', , icon=shiny::icon("warning"), status = "danger")}#
  	if(fingerprint.upload==T){truc$fingerprint.upload <- notificationItem('Upload the fingerprint file', , icon=shiny::icon("fa-thumbs-o-up"), status = "success")}else{truc$fingerprint.upload <- notificationItem('Upload the fingerprint file', icon("cog", lib = "glyphicon")#
, status = "danger")}#
  	return(truc)#
  })#
  output$messageMenu <- renderMenu({#
  dropdownMenu(type = "task", .list = task.list(),badgeStatus = "warning")#
})#
#
}#
#
shinyApp(ui, server)
library(shinydashboard)#
#
TMX.upload <- F #Red#
Recette.upload <- F#orange#
Recette.visit <- F#Red#
TMX.read <- F#Red#
TMX.extrat <- F#Red#
fingerprint.upload <- T#Red#
Baseline.upload <- F#orange#
Labelisation <- F#Red#
Model.train <- F#Red#
ui <- dashboardPage(#
#
  dashboardHeader(title = "Info boxes",dropdownMenuOutput("messageMenu")#
#
  ),#
  dashboardSidebar(),#
  dashboardBody(#
    # infoBoxes with fill=TRUE#
    fluidRow(#
      infoBoxOutput("progressBox2"),#
      infoBoxOutput("ibox"),#
      valueBoxOutput("vbox")#
    ),#
#
    fluidRow(#
      # Clicking this will increment the progress amount#
      box(width = 4, actionButton("count", "Increment progress"))#
    )#
  )#
)#
#
server <- function(input, output) {#
  task.list <- reactive({#
  	truc <- list()#
  	if(TMX.upload==T){truc$TMX.upload <- notificationItem('Upload the TMX file', icon=icon("industry"), status = "success")}else{truc$TMX.upload <- notificationItem('Upload the TMX file', , icon=shiny::icon("warning"), status = "danger")}#
  	if(fingerprint.upload==T){truc$fingerprint.upload <- notificationItem('Upload the fingerprint file', , icon=shiny::icon("fa-thumbs-o-up"), status = "success")}else{truc$fingerprint.upload <- notificationItem('Upload the fingerprint file', icon=icon("cog", lib = "glyphicon")#
, status = "danger")}#
  	return(truc)#
  })#
  output$messageMenu <- renderMenu({#
  dropdownMenu(type = "task", .list = task.list(),badgeStatus = "warning")#
})#
#
}#
#
shinyApp(ui, server)
library(shinydashboard)#
#
TMX.upload <- F #Red#
Recette.upload <- F#orange#
Recette.visit <- F#Red#
TMX.read <- F#Red#
TMX.extrat <- F#Red#
fingerprint.upload <- T#Red#
Baseline.upload <- F#orange#
Labelisation <- F#Red#
Model.train <- F#Red#
ui <- dashboardPage(#
#
  dashboardHeader(title = "Info boxes",dropdownMenuOutput("messageMenu")#
#
  ),#
  dashboardSidebar(),#
  dashboardBody(#
    # infoBoxes with fill=TRUE#
    fluidRow(#
      infoBoxOutput("progressBox2"),#
      infoBoxOutput("ibox"),#
      valueBoxOutput("vbox")#
    ),#
#
    fluidRow(#
      # Clicking this will increment the progress amount#
      box(width = 4, actionButton("count", "Increment progress"))#
    )#
  )#
)#
#
server <- function(input, output) {#
  task.list <- reactive({#
  	truc <- list()#
  	if(TMX.upload==T){truc$TMX.upload <- notificationItem('Upload the TMX file', icon=icon("industry"), status = "success")}else{truc$TMX.upload <- notificationItem('Upload the TMX file', , icon=shiny::icon("warning"), status = "danger")}#
  	if(fingerprint.upload==T){truc$fingerprint.upload <- notificationItem('Upload the fingerprint file', , icon=icon("cog", lib = "glyphicon"), status = "success")}else{truc$fingerprint.upload <- notificationItem('Upload the fingerprint file', icon=icon("cog", lib = "glyphicon")#
, status = "danger")}#
  	return(truc)#
  })#
  output$messageMenu <- renderMenu({#
  dropdownMenu(type = "task", .list = task.list(),badgeStatus = "warning")#
})#
#
}#
#
shinyApp(ui, server)
shiny::runApp("~/Dropbox/rTMX/apps",launch.browser=TRUE,host = "0.0.0.0",port=888)
shiny::runApp("~/Dropbox/rTMX/apps",launch.browser=TRUE,host = "0.0.0.0",port=8004)
library(shiny)#
runApp( list(ui = bootstrapPage(#
  verbatimTextOutput("results"),#
  tags$script('#
    $(document).on("keypress", function (e) {#
       Shiny.onInputChange("mydata", e.which);#
    });#
  ') #
)#
, server = function(input, output, session) {#
#
  output$results = renderPrint({#
    input$mydata#
  })#
}#
))
shinyapps::deployApp("~/Dropbox/rTMX/flyRtmx",account="dimitrif",appName="flyRtmx")
sum(NULL + T+F)
sum(T+F)
sum(as.logical(NULL),T,F)
sum(NULL, T,F)
shiny::runApp("~/Dropbox/rTMX/flyRtmx",host = "0.0.0.0",port=8009,launch.browser = T)
,launch.browser = T)
shiny::runApp("~/Dropbox/DataReader",host = "0.0.0.0",port=8010,launch.browser = T)
2.5*2.5*0.4
0.8+0.204*log(935/12,2)
0.8+0.204*log2(935/12)
0.8+0.204*log2(67/22)
0.8+0.204*log2(105/20)
0.8+0.345*log2(((823-675)^2+(312-41)^2)^0.5/30)
shiny::runApp("~/Dropbox/DataReader",host = "0.0.0.0",port=8010,launch.browser = T)
load("/Users/dimitri/Documents/wd26012014.RData")
data
shiny::runApp("~/Dropbox/rTMX/flyBlackBox",host = "0.0.0.0",port=8010,launch.browser = T)
load("/Users/dimitri/Dropbox/Dentiste/data-aggreg/1792111.Rdata")
data
shiny::runApp("~/Dropbox/Dentiste/app",host = "0.0.0.0",port=8039,launch.browser = T)
shiny::runApp("/home/clau/Dropbox/RTMX/flyBlackBox",host = "0.0.0.0",port=8010,launch.browser = F)
shiny::runApp("/~Dropbox/RTMX/flyBlackBox",host = "0.0.0.0",port=8010,launch.browser = F)
shiny::runApp("~Dropbox/RTMX/flyBlackBox",host = "0.0.0.0",port=8010,launch.browser = F)
shiny::runApp("~/Dropbox/RTMX/flyBlackBox",host = "0.0.0.0",port=8010,launch.browser = F)
shiny::runApp("~/Dropbox/EPTLC/apps",launch.browser=F,host='0.0.0.0',port=8012)
shiny::runApp("~/Dropbox/rTLC/apps",launch.browser=F,host='0.0.0.0',port=8012)
setwd("/Applications")
fo()
import()
roi()
q()
ls()
rm(ls())
rm(names(ls()))
class(ls())
apply(ls(),1,rm)
apply(data.frame(ls()),1,rm)
apply(data.frame(ls()),1,function(x){rm(rownames(x))})
rm('Iris')
ls
ls()
for(i in ls()){}
for(i in ls()){rm(i)}
ls()
for(i in ls()){rm(as.character(i))}
ls()
shiny::runApp("~/Dropbox/rTLC/apps",launch.browser=F,host='0.0.0.0',port=8012)
q()
shiny::runApp("~/Dropbox/Shiny.HPTLC",launch.browser=TRUE)
install.packges('curl')
install.packages('curl')
shiny::runApp("~/Dropbox/Shiny.HPTLC",launch.browser=TRUE)
shiny::runApp("~/Dropbox/rTLC/apps",launch.browser=F,host='0.0.0.0',port=8012)
